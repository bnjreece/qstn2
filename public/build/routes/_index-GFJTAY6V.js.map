{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "empty-module:../utils/supabase.server", "../../../app/routes/_index.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1733448376783.6653\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport React from \"react\";\nimport { supabase } from \"../utils/supabase.server\";\nexport async function loader() {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('messages').select('text').limit(1).maybeSingle();\n    if (error) {\n      console.error('Error fetching message:', error);\n      return json({\n        message: 'Hello World',\n        error: error.message,\n        details: error.details\n      });\n    }\n    if (!data) {\n      return json({\n        message: 'Hello World',\n        error: null\n      });\n    }\n    return json({\n      message: data.text || 'Hello World',\n      error: null\n    });\n  } catch (err) {\n    console.error('Unexpected error:', err);\n    return json({\n      message: 'Hello World',\n      error: err instanceof Error ? err.message : 'Unknown error',\n      details: err\n    });\n  }\n}\nexport default function Index() {\n  _s();\n  const {\n    message,\n    error,\n    details\n  } = useLoaderData();\n  if (error) {\n    return <div style={{\n      fontFamily: \"system-ui, sans-serif\",\n      lineHeight: \"1.4\",\n      maxWidth: \"800px\",\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    }}>\n        <h1>Error: {error}</h1>\n        {details && <pre style={{\n        whiteSpace: 'pre-wrap'\n      }}>\n            {JSON.stringify(details, null, 2)}\n          </pre>}\n      </div>;\n  }\n  return <div style={{\n    fontFamily: \"system-ui, sans-serif\",\n    lineHeight: \"1.4\",\n    maxWidth: \"800px\",\n    margin: \"0 auto\",\n    padding: \"2rem\"\n  }}>\n      <h1>{message}</h1>\n    </div>;\n}\n_s(Index, \"AqIohYfFI64OyJdgMBnK2dhUuJA=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACAlB;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACqBlB,kBAAqB;AAGrB,sBAAyB;AAiDjB;AAxER,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AAwCe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,MAAI,OAAO;AACT,WAAO,mDAAC,SAAI,OAAO;AAAA,MACjB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,GACI;AAAA,yDAAC,QAAG;AAAA;AAAA,QAAQ;AAAA,WAAZ;AAAA;AAAA;AAAA;AAAA,aAAkB;AAAA,MACjB,WAAW,mDAAC,SAAI,OAAO;AAAA,QACxB,YAAY;AAAA,MACd,GACO,eAAK,UAAU,SAAS,MAAM,CAAC,KAHxB;AAAA;AAAA;AAAA;AAAA,aAIV;AAAA,SAZC;AAAA;AAAA;AAAA;AAAA,WAaL;AAAA,EACJ;AACA,SAAO,mDAAC,SAAI,OAAO;AAAA,IACjB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,EACX,GACI,6DAAC,QAAI,qBAAL;AAAA;AAAA;AAAA;AAAA,SAAa,KAPV;AAAA;AAAA;AAAA;AAAA,SAQL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
