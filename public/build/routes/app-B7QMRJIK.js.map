{
  "version": 3,
  "sources": ["../../../app/routes/app.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.tsx\");\n  import.meta.hot.lastModified = \"1733506896046.3623\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Outlet, useLoaderData } from \"@remix-run/react\";\nimport { requireUserId } from \"../utils/auth.server\";\nimport { supabase } from \"../utils/supabase.server\";\nimport React from \"react\";\nexport async function loader({\n  request\n}) {\n  // First check if we have a server-side session\n  const userId = await requireUserId(request);\n\n  // Then get user details from Supabase session\n  const {\n    data: {\n      session\n    },\n    error: sessionError\n  } = await supabase.auth.getSession();\n  if (sessionError) {\n    console.error(\"Failed to get Supabase session:\", sessionError);\n    // If there's an error getting the Supabase session, but we have a server session,\n    // still allow access but with limited data\n    return json({\n      user: {\n        email: \"User\"\n      }\n    });\n  }\n\n  // If we have a server session but no Supabase session, still allow access\n  if (!session?.user) {\n    console.log(\"No Supabase session found, but server session exists\");\n    return json({\n      user: {\n        email: \"User\"\n      }\n    });\n  }\n  return json({\n    user: {\n      email: session.user.email\n    }\n  });\n}\nexport default function AppLayout() {\n  _s();\n  const {\n    user\n  } = useLoaderData();\n  return <div className=\"min-h-screen bg-gray-100\">\n      <nav className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <span className=\"text-xl font-bold text-indigo-600\">QSTN</span>\n              </div>\n            </div>\n            <div className=\"flex items-center\">\n              <span className=\"text-sm text-gray-500\">{user.email}</span>\n              <form action=\"/logout\" method=\"post\" className=\"ml-4\">\n                <button type=\"submit\" className=\"text-sm text-gray-500 hover:text-gray-700\">\n                  Logout\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"py-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Outlet />\n        </div>\n      </main>\n    </div>;\n}\n_s(AppLayout, \"FpjQZylbefWQChk+MjGNfSb2jDo=\", false, function () {\n  return [useLoaderData];\n});\n_c = AppLayout;\nvar _c;\n$RefreshReg$(_c, \"AppLayout\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAErB,kBAA8B;AAC9B,sBAAyB;AAoDT;AA3EhB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,yBAA2B,EAAE;AAAA,EACtE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAoB;AACpB,cAAY,IAAI,eAAe;AACjC;AA+Ce,SAAR,YAA6B;AAClC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,4BAClB;AAAA,uDAAC,SAAI,WAAU,sBACb,6DAAC,SAAI,WAAU,0CACb,6DAAC,SAAI,WAAU,6BACb;AAAA,yDAAC,SAAI,WAAU,QACb,6DAAC,SAAI,WAAU,mCACb,6DAAC,UAAK,WAAU,qCAAoC,oBAApD;AAAA;AAAA;AAAA;AAAA,aAAwD,KAD1D;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,SAAI,WAAU,qBACb;AAAA,2DAAC,UAAK,WAAU,yBAAyB,eAAK,SAA9C;AAAA;AAAA;AAAA;AAAA,eAAoD;AAAA,QACpD,mDAAC,UAAK,QAAO,WAAU,QAAO,QAAO,WAAU,QAC7C,6DAAC,YAAO,MAAK,UAAS,WAAU,6CAA4C,sBAA5E;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,WANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA,KAfF;AAAA;AAAA;AAAA;AAAA,WAgBA,KAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,IAEA,mDAAC,UAAK,WAAU,SACd,6DAAC,SAAI,WAAU,0CACb,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,WAAQ,KADV;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OAzBG;AAAA;AAAA;AAAA;AAAA,SA0BL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
